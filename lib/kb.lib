.cpu _65c02
.encoding "ascii"

#importonce
.filenamespace kb


#import "zp.lib"
#import "via.lib"
#import "macros.lib"
#import "lcd.lib"

// keyboard flags
.label R_SHIFT_DOWN = %00000001
.label L_SHIFT_DOWN = %00000010
.label RELEASE_NXT = %00000100
.label EXTENDED_NXT = %00001000
.label CONTROL_DOWN = %00010000

// useful ASCII values
.label ASCII_BACKSPACE = $08
.label ASCII_TAB = $09
.label ASCII_NEWLINE = $0a
.label ASCII_ESC = $1b

// keyboard scancodes
.label K_RELEASE = $f0
.label K_ESC = $76
.label K_BACKSPACE = $66
.label K_CAPS_LOCK = $58
.label K_ENTER = $5a
.label K_L_SHIFT = $12
.label K_R_SHIFT = $59
.label K_F11 = $78
.label K_F12 = $07
.label K_EXTENDED = $e0

// extended scancodes, with bit 7 set
.label K_DOWN = $72 | %10000000
.label K_UP = $75 | %10000000
.label K_LEFT = $6b | %10000000
.label K_RIGHT = $74 | %10000000
.label K_PG_DOWN = $7a | %10000000
.label K_PG_UP = $7d | %10000000
.label K_END = $69 | %10000000
.label K_HOME = $6c | %10000000

.var KB_BUFFER_SIZE = 16



/* --------------------------------------------------------------------------------------- 
Initialize the keyboard interface
*/
init:
	pha

    stz zp.kb_flags
    stz zp.kb_read_ptr
    stz zp.kb_write_ptr

    lda #%00000000                                 	// setup kb pins as input
    sta via.DDA

	lda via.PCR
	ora #via.CA1_RISING                             // keyboard interrupt on rising edge
    sta via.PCR

    lda via.IER
    ora #(via.CA1_INT | via.INT_ENABLE)				// enable interrupts on CA1 (keyboard)
    sta via.IER
    
    pla
    rts


/* --------------------------------------------------------------------------------------- 
Place the next keypress in the keyboard buffer into register A, if one exists. 
If the buffer is empty, sets A to 0 and sets the zero flag
Return the ASCII code for regular characters and tab, back space, enter = line feed, and esc.
For extended keypresses (e.g., arrow keys), set A to the 7-bit scancode with bit 7 set.
Sets negative flag for extended keypress.
*/
get_press:
    phx
    phy

read_from_buffer:
    lda #0                                          // initialize A to 0

    sei                                             // disable interrupts
    ldx zp.kb_read_ptr                              // load keyboard buffer read pointer
    cpx zp.kb_write_ptr                             // check if its equal to the keyboard buffer write pointer
    cli                                             // reenable interrupts
    
    bne has_scancode                                // if read != write, there is a scancode to process
    jmp get_press_done                              // otherwise, buffer is empty. Return the 0 in A

has_scancode:
    ldy zp.kb_buffer,x                              // load the scancode in the keyboard buffer at the read pointer

    cpy #K_EXTENDED                                 // check for the extended scancode
    bne not_extended
    set_bits(zp.kb_flags, EXTENDED_NXT)             // if it is extended scancode, set the extended flag
    update_read_ptr()                               // update the read pointer 
    jmp read_from_buffer                            // consume the next scancode in the buffer to get real keypress
not_extended:

    cpy #K_RELEASE                                  // check for the release scancode
    bne not_release
    set_bits(zp.kb_flags, RELEASE_NXT)              // if it is release scancode, set the release flag
    update_read_ptr()                               // update the read pointer 
    jmp read_from_buffer                            // consume the next scancode in the buffer to get real keypress
not_release:

    handle_modifier(K_L_SHIFT, L_SHIFT_DOWN)        // check for and handle left shift scancode

    handle_modifier(K_R_SHIFT, R_SHIFT_DOWN)        // check for and handle right shift scancode

    lda zp.kb_flags                                 // check if this scancode is for a released key
    bit #RELEASE_NXT 
    beq not_released_key
released_key:
    clear_bits(zp.kb_flags, RELEASE_NXT | EXTENDED_NXT)  // clear the released and extended flags
    update_read_ptr()
    jmp read_from_buffer                            // consume the next scancode in the buffer to get real keypress
not_released_key:

    bit #EXTENDED_NXT                               // check if this is an extended key press
    beq not_extended_key
    clear_bits(zp.kb_flags, EXTENDED_NXT)           // if it's extended, clear the extended flag
    tya                                             // move scancode into A
    ora #%10000000                                  // and set bit 7
    jmp inc_read_ptr                                // then we can return
not_extended_key:

    cpy #$80                                        // make sure the scancode has bit 7 clear
    bcc valid_scancode                              // if scancode is < $80, then it's valid
    lda #$ff                                        // otherwise, it's a weird scancode. Put $ff in A
    jmp inc_read_ptr

valid_scancode:
    
    bit #(R_SHIFT_DOWN | L_SHIFT_DOWN)              // check if either shift is down
    beq shift_up                                    // if not, branch
    lda keymap_shifted,y                            // if shift down, load shifted ascii into A
    bra inc_read_ptr                                // and skip next instruction

shift_up:
    lda keymap,y                                    // load unshifted ascii into A

inc_read_ptr:
    update_read_ptr()
get_press_done:
    plx
    ply
    ora #%00000000                                  // set zero flag if A is 0 and negative flag if A is negative
    rts

// Increment the read pointer stored in register X and save it, wrapping at buffer size
.macro update_read_ptr() {
    inx
    cpx #KB_BUFFER_SIZE
    bcc store_read_ptr                              // if KB_READ_PTR reached buffer size, reset to 0
    ldx #0
store_read_ptr:
    stx zp.kb_read_ptr  
}

// Check for and handle a modifier scancode. Flips the modifier's flag and then tries to get a real press
.macro handle_modifier(scancode, flag) {
    cpy #scancode                                   // check for the modifier's scancode
    bne not_modifier
    lda zp.kb_flags                                 // check if modifier is being released 
    bit #RELEASE_NXT
    bne modifier_released
    set_bits(zp.kb_flags, flag)                     // if modifier is being pressed, set flag
    bra modifier_done                               // and jump to done
modifier_released:
    clear_bits(zp.kb_flags, flag | RELEASE_NXT | EXTENDED_NXT) // if modifier is being released, clear flags
modifier_done:
    update_read_ptr()                               // update read pointer
    jmp read_from_buffer                            // and try to get a real keypress
not_modifier:
}


/* --------------------------------------------------------------------------------------- 
Handle a keyboard interrupt. Store scancode in keyboard buffer
*/

.macro @kb_handle_irq() {
    lda via.PORTA                                   // read scancode, clearing interrupt
    ldx zp.kb_write_ptr
    sta zp.kb_buffer,x                              // store keyboard scancode in buffer

    inx                                             // increment write pointer
    cpx #KB_BUFFER_SIZE                             // check if we've reached buffer size
    bcc exit_irq_keyboard                           // if not, we're good to save it
    ldx #0                                          // otherwise, reset to 0
exit_irq_keyboard:
    stx zp.kb_write_ptr                             // update keyboard write pointer
}


// Save some space by only storing the first half of the keymaps
keymap:
    .text @"?????????????\$09`?"                    // 00-0F
    .text "?????q1???zsaw2?"                        // 10-1F
    .text "?cxde43?? vftr5?"                        // 20-2F
    .text "?nbhgy6???mju78?"                        // 30-3F
    .text "?,kio09??./l;p-?"                        // 40-4F
    .text @"??'?[=????\$0a]?\\??"                   // 50-5F
    .text @"??????\$08??1?47???"                    // 60-6F
    .text @"0.2568\$1b??+3-*9??"                    // 70-7F

keymap_shifted:
    .text @"?????????????\$09~?"                    // 00-0F
    .text "?????Q!???ZSAW@?"                        // 10-1F
    .text "?CXDE#$?? VFTR%?"                        // 20-2F
    .text "?NBHGY^???MJU&*?"                        // 30-3F
    .text "?<KIO)(??>?L:P_?"                        // 40-4F
    .text @"??\"?{+????\$0a}?|??"                   // 50-5F
    .text @"??????\$08??1?47???"                    // 60-6F
    .text @"0.2568\$1b??+3-*9??"                    // 70-7F
 